set nocompatible

" dont discard buffers when switching to a different one
set hidden

" Get out of insert mode
noremap <Leader><Leader> <Esc>
inoremap <Leader><Leader> <Esc>
tnoremap <Leader><Leader> <Esc>

" configure nice defaults
syntax enable
filetype plugin on
set number
set wildmenu

call plug#begin('~/.nvim/plugged')
  " Required by ncm2
  Plug 'roxma/nvim-yarp'

  " Git
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'

  " Files / Buffers
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'scrooloose/nerdtree'

  " Code Minaplion
  Plug 'ncm2/ncm2'
  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }
  Plug 'junegunn/fzf.vim'
  Plug 'Shougo/echodoc.vim'
  Plug 'tpope/vim-commentary'

  " Filetype Plugins
  Plug 'isobit/vim-caddyfile'
  Plug 'posva/vim-vue'
  Plug 'rust-lang/rust.vim'

  " Look and Feel
  Plug 'bling/vim-bufferline'
  Plug 'psliwka/vim-smoothie'
  Plug 'vim-airline/vim-airline'
call plug#end()

let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'

autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

let g:LanguageClient_serverCommands = {
  \ 'c': ['clangd'],
  \ 'cpp': ['clangd'],
  \ 'json': ['json-languageserver', '--stdio'],
  \ 'python': ['pyls'],
  \ 'rust': ['rls'],
  \ }

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v(node_modules|target|[\/]\.(git|hg|svn))$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

let g:ctrlp_working_path_mode = ''

noremap <Leader>b :CtrlPBuffer<CR>

function SetupLSP()
  nmap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nmap <silent> gt :call LanguageClient#textDocument_typeDefinition()<CR>
  nmap <silent> gr :call LanguageClient#textDocument_references()<CR>

  nmap <Leader>o :call LanguageClient_textDocument_documentSymbol()<CR>

  nmap <Leader>r :call LanguageClient#textDocument_rename()<CR>
  nmap <Leader>f :call LanguageClient#textDocument_formatting()<CR>
  vmap <Leader>f :call LanguageClient#textDocument_rangeFormatting()<CR>
  nmap <Leader>a :call LanguageClient_textDocument_codeAction()<CR>
endfunction()

augroup LSP
  au!
  autocmd FileType c,cpp,json,python,rust call SetupLSP()
augroup end

autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType go setlocal expandtab shiftwidth=4 softtabstop=4

set expandtab
