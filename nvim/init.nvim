set nocompatible

" dont discard buffers when switching to a different one
set hidden

" configure nice defaults
syntax enable
filetype plugin on
set number
set wildmode=longest:full
set wildmenu
set relativenumber

set textwidth=80
set colorcolumn=85
set nowrap

set inccommand=split

" Extra movement actions (mostly from kakoune)
noremap gl $
noremap gh ^
noremap gH 0
noremap gk gg
noremap gj G
nnoremap <Enter> i
nnoremap U <c-r>

" Basic keybinds which don't require plugins
nmap <Space> \

noremap Y y$

" TODO: This would be nice if it didn't also map Esc
" tnoremap <C-[> <C-\><C-N>

" Buffer switching
noremap <Tab> :bnext<CR>
noremap <S-Tab> :bprev<CR>

" File Type Config
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType go setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType c setlocal expandtab shiftwidth=4 softtabstop=4

" I prefer spaces over tabs
set expandtab

"
" Folding styles
"

" Setting fillchars/fold to a space. It's there you just can't see it.
set fillchars=fold:\  
set foldtext=CleanFoldText()
autocmd FileType rust if FoldCondition() | call EnableFolding() | endif

function FoldCondition()
  return line('$') > 150
endfunction

function EnableFolding()
  setlocal foldmethod=syntax
  setlocal foldlevel=0
  setlocal foldcolumn=1
endfunction

function CleanFoldText()
  " Copied from https://github.com/pseewald/vim-anyfold/blob/master/autoload/anyfold.vim
  let fs = v:foldstart
  while getline(fs) !~ '\w'
    let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . substitute("%s lines", "%s", string(foldSize), "g") . " "
  let foldLevelStr = repeat(" + ", v:foldlevel)
  let lineCount = line("$")

  " Subtracting 10 to shift the text over a bit, so that I don't have to calulate the width of the buffer
  let w    = winwidth(0) - &foldcolumn - &number * &numberwidth - strwidth(line.foldSizeStr.foldLevelStr) - 10
  let wmax = 85 - strwidth(line)
  let expansionString = repeat(" ", min([w, wmax]))

  return line.expansionString.foldSizeStr.foldLevelStr
endfunction

call plug#begin('~/.config/nvim/plugged')
  " Git
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive', { 'on': [ 'G' ] }

  " Files / Buffers
  " TODO: Replace with fzy for better search results
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim', { 'on': ['Files', 'Buffers', 'Ag'] }
  Plug 'cloudhead/neovim-fuzzy'
  Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTreeToggle', 'NERDTree' ] }
  " Plug 'tpope/vim-eunuch', { 'on': [ 'Rename', 'Chmod', 'Mkdir', 'SudoWrite', 'SudoEdit' ] }

  " Code Minaplion
  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }
  Plug 'Shougo/echodoc.vim'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'junegunn/vim-easy-align'
  " Plug 'michaelb/sniprun', {'do': 'bash ./install.sh'}
  " Code Coverage, maybe useful in the future
  " Plug 'retorillo/istanbul.vim'

  " File Navigation
  Plug 'preservim/tagbar', { 'on': [ 'TagbarOpenAutoClose', 'Tagbar' ] }
  Plug 'wsdjeg/FlyGrep.vim', { 'on': [ 'FlyGrep' ] }

  " Auto Complete
  " Plug 'prabirshrestha/asyncomplete.vim'
  " Plug 'yami-beta/asyncomplete-omni.vim'
  " Plug 'prabirshrestha/asyncomplete-file.vim'

  " Plug 'roxma/nvim-yarp'
  " Plug 'ncm2/ncm2'
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

  " Filetype Plugins
  Plug 'sheerun/vim-polyglot'
  Plug 'rust-lang/rust.vim'
  Plug 'sirtaj/vim-openscad'
  Plug 'dpelle/vim-LanguageTool', { 'on': [ 'LanguageToolCheck' ] }

  " Look and Feel
  Plug 'chriskempson/base16-vim'
  Plug 'mike-hearn/base16-vim-lightline'
  Plug 'psliwka/vim-smoothie'
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'
  Plug 'ryanoasis/vim-devicons'
  Plug 'junegunn/goyo.vim'

  " Extra Tools
  Plug 'vimwiki/vimwiki'
  Plug 'iamcco/markdown-preview.nvim', {
      \ 'do': { -> mkdp#util#install() },
      \ 'for': ['markdown', 'vim-plug']
  \ }
call plug#end()

let g:vimwiki_list = [
\ {'path': '~/Nextcloud/school/Optics 199/notes/',
\  'path_html': '/tmp/optics_notes_rendered/',
\  'template_path': '~/Nextcloud/school/Optics 199/notes/templates/',
\  'template_default': 'default',
\  'template_ext': '.html',
\ }]

let g:languagetool_cmd='/usr/bin/languagetool'

" NOTE: This may break in some terminals, maybe add a check later
set termguicolors
colorscheme base16-<%= $THEME %>

let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'

autocmd BufEnter * call deoplete#enable()
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-r>=deoplete#manual_complete()<CR>'
inoremap <expr> <C-p> pumvisible() ? '<C-n>' : '<C-r>=deoplete#manual_complete()<CR>'

" neovim-languageclient
let g:LanguageClient_serverCommands = {
  \ 'c': ['clangd'],
  \ 'cpp': ['clangd'],
  \ 'json': ['json-languageserver', '--stdio'],
  \ 'python': ['pyls'],
  \ 'rust': ['rust-analyzer'],
  \ }

set showtabline=2
let g:lightline = {
\   'tabline': {
\     'left': [ [ 'buffers' ] ],
\     'right': [ [ 'close' ] ]
\   },
\   'component_expand': {
\     'buffers': 'lightline#bufferline#buffers'
\   },
\   'component_type': {
\     'buffers': 'tabsel'
\   },
\   'colorscheme': 'base16_<%= $THEME | sed "s/-/_/g" %>'
\ }

let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#min_buffer_count = 2

" Fly Grep
let g:FlyGrep_input_delay = 40

"
" Keybindings
"

" SnipRun
nmap <silent> <Leader>s <Plug>SnipRun
vmap <silent> <Leader>s <Plug>SnipRun

" FZF
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
noremap <C-f> :Files<CR>
noremap <Leader>f :Files<CR>
noremap <Leader>b :Buffers<CR>

nmap <silent> <Leader>o :Tagbar<CR>
nmap <silent> <Leader>n :NERDTreeToggle<CR>

nmap <Leader>g :FlyGrep<CR>

" LanguageClient Key Bindings
function SetupLSP()
  set omnifunc=LanguageClient#omniComplete
  set completefunc=LanguageClient#complete

  nmap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nmap <silent> gt :call LanguageClient#textDocument_typeDefinition()<CR>
  nmap <silent> gr :call LanguageClient#textDocument_references()<CR>

  " nmap <Leader>o :call LanguageClient_textDocument_documentSymbol()<CR>

  nmap <Leader>r :call LanguageClient#textDocument_rename()<CR>
  nmap <Leader>= :call LanguageClient#textDocument_formatting()<CR>
  vmap <Leader>= :call LanguageClient#textDocument_rangeFormatting()<CR>
  nmap <Leader>a :call LanguageClient_textDocument_codeAction()<CR>
endfunction()

augroup LSP
  au!
  autocmd FileType c,cpp,json,python,rust call SetupLSP()
augroup end
