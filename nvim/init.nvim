" TODO: All of these settings need to be organized somehow
set nocompatible

" dont discard buffers when switching to a different one
set hidden

" configure nice defaults
syntax enable
filetype plugin on
set number
set wildmode=longest:full
set wildmenu
set relativenumber
set ignorecase
set smartcase
set timeoutlen=300

set textwidth=80
set colorcolumn=85
set nowrap

set inccommand=split

" Font for when neovim is running in a gui
set guifont=InputMono

" Extra movement actions (mostly from kakoune)
noremap gl $
noremap gh ^
noremap gH 0
noremap gk gg
noremap gj G
" nnoremap <Enter> i
nnoremap U <c-r>

" Basic keybinds which don't require plugins
nmap <Space> <leader>

" Get out of terminal mode a bit easier
tnoremap \<esc>     <c-\><c-n>
tnoremap <c-z><c-z> <c-\><c-n>

" Clear search highlight
noremap <leader>ch <cmd>noh

" Buffer switching
noremap <Tab> :bnext<CR>
noremap <S-Tab> :bprev<CR>

" Easier window switching
noremap <a-h> <cmd>wincmd h<CR>
noremap <a-j> <cmd>wincmd j<CR>
noremap <a-k> <cmd>wincmd k<CR>
noremap <a-l> <cmd>wincmd l<CR>

noremap sh :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
noremap sj :set splitbelow<CR>:split<CR>
noremap sk :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
noremap sl :set splitright<CR>:vsplit<CR>

" Yank & Paste mappings
noremap Y y$
noremap <Leader>y "+y
noremap <Leader>p "+p

" Save undo history to a file
" NOTE: I have plenty of resources to spare on my computer, but this could
"       potentially cause performance issues
set undodir=~/.local/share/nvim/undo
set undofile
set undolevels=10000
set undoreload=100000

"
" Folding styles
"

" Setting fillchars/fold to a space. It's there you just can't see it.
set fillchars=fold:\  
set fillchars+=vert:\│
set foldtext=CleanFoldText()
autocmd FileType rust if FoldCondition() | call EnableFolding() | endif

function FoldCondition()
  return line('$') > 150
endfunction

function EnableFolding()
  setlocal foldmethod=syntax
  setlocal foldlevel=0
  setlocal foldcolumn=1
endfunction

function CleanFoldText()
  " Copied from https://github.com/pseewald/vim-anyfold/blob/master/autoload/anyfold.vim
  let fs = v:foldstart
  while getline(fs) !~ '\w'
    let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . substitute("%s lines", "%s", string(foldSize), "g") . " "
  let foldLevelStr = repeat(" + ", v:foldlevel)
  let lineCount = line("$")

  " Subtracting 10 to shift the text over a bit, so that I don't have to calulate the width of the buffer
  let w    = winwidth(0) - &foldcolumn - &number * &numberwidth - strwidth(line.foldSizeStr.foldLevelStr) - 10
  let wmax = 85 - strwidth(line)
  let expansionString = repeat(" ", min([w, wmax]))

  return line.expansionString.foldSizeStr.foldLevelStr
endfunction

call plug#begin('~/.config/nvim/plugged')
  " Git
  Plug 'tpope/vim-fugitive', { 'on': [ 'G' ] }
  
  <% if $NVIM_LUA; then -%>
  " Neovim 0.5 Plugins

  " Dependcies
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'

  " Utilities
  Plug 'nvim-telescope/telescope.nvim'
  " Note to self, there's a generic versin which does't supporte telescope
  Plug 'nvim-telescope/telescope-hop.nvim'
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'ThePrimeagen/harpoon'
  " Might be useful for lsp diagnostics in the future
  " Plug 'folke/trouble.nvim'

  " Looks and data sources
  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'lukas-reineke/indent-blankline.nvim'
  " Needs session config, see todo on vim-obsession
  " also look into vim-startify
  " Plug 'glepnir/dashboard-nvim'

  " Completion
  Plug 'hrsh7th/nvim-compe'
  Plug 'ray-x/lsp_signature.nvim'
  <% else -%>
  " Legacy Plugins
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim', { 'on': ['Files', 'Buffers', 'Ag'] }
  Plug 'wsdjeg/FlyGrep.vim', { 'on': [ 'FlyGrep' ] }
  Plug 'cloudhead/neovim-fuzzy' "fzy

  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }

  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

  Plug 'airblade/vim-gitgutter'
  <% fi -%>

  " Files / Buffers
  " TODO: Replace with fzy for better search results
  Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTreeToggle', 'NERDTree' ] }
  Plug 'tpope/vim-eunuch', { 'on': [ 'Rename', 'Chmod', 'Mkdir', 'SudoWrite', 'SudoEdit' ] }

  " Buffer Minaplion
  Plug 'Shougo/echodoc.vim'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'junegunn/vim-easy-align'
  " Auto pairs
  Plug 'cohama/lexima.vim'
  Plug 'michaelb/sniprun', {'do': 'bash ./install.sh'}
  " Code Coverage, maybe useful in the future
  " Plug 'retorillo/istanbul.vim'
  Plug 'vim-test/vim-test'

  " File Navigation
  Plug 'preservim/tagbar', { 'on': [ 'TagbarOpenAutoClose', 'Tagbar' ] }

  " Auto Complete
  " Plug 'prabirshrestha/asyncomplete.vim'
  " Plug 'yami-beta/asyncomplete-omni.vim'
  " Plug 'prabirshrestha/asyncomplete-file.vim'

  " Plug 'roxma/nvim-yarp'
  " Plug 'ncm2/ncm2'

  " Filetype Plugins
  Plug 'sheerun/vim-polyglot'
  Plug 'rust-lang/rust.vim'
  Plug 'sirtaj/vim-openscad'
  Plug 'dpelle/vim-LanguageTool', { 'on': [ 'LanguageToolCheck' ] }

  " Look and Feel
  Plug 'chriskempson/base16-vim'
  Plug 'mike-hearn/base16-vim-lightline'
  Plug 'psliwka/vim-smoothie'
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'
  Plug 'ryanoasis/vim-devicons'
  Plug 'junegunn/goyo.vim'

  " Extra Tools
  <% if $VIMWIKI; then -%>
  Plug 'vimwiki/vimwiki'
  <% fi -%>
  Plug 'iamcco/markdown-preview.nvim', {
      \ 'do': { -> mkdp#util#install() },
      \ 'for': ['markdown', 'vim-plug']
  \ }
call plug#end()

let g:indentLine_char = '│'
let g:indent_blankline_buftype_exclude = ['terminal']
let g:indent_blankline_filetype_exclude = ['help', 'dashboard']
let g:indent_blankline_show_current_context = v:true
let g:indent_blankline_show_end_of_line = v:true
let g:indent_blankline_show_trailing_blankline_indent = v:false
" let g:indent_blankline_space_char = '⋅'
let g:indent_blankline_space_char = ' '
let g:indent_blankline_use_treesitter = v:true

let g:rainbow_active = 0
autocmd FileType scheme RainbowToggleOn

" Somethiing with spaces aftrward for testing          

<% if $VIMWIKI; then -%>
"\ {'path': '~/Nextcloud/school/ksc/Optics 199/notes/',
let g:vimwiki_list = [
\ {'path': '~/Nextcloud/personal-wiki/',
\  'path_html': '/tmp/optics_notes_rendered/',
\  'template_path': '~/Nextcloud/school/ksc/Optics 199/notes/templates/',
\  'template_default': 'default',
\  'template_ext': '.html',
\  'html_template': '/home/aren/Nextcloud/school/ksc/Optics 199/notes/templates/default.html'
\ }]

let g:vimiwki_filetypes = [ ]
<% fi -%>

let g:languagetool_cmd='/usr/bin/languagetool'

" NOTE: This may break in some terminals, maybe add a check later
set termguicolors
colorscheme base16-<%= $THEME %>

let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'

set showtabline=2
let g:lightline = {
\   'tabline': {
\     'left': [ [ 'buffers' ] ],
\     'right': [ [ 'close' ] ]
\   },
\   'component_expand': {
\     'buffers': 'lightline#bufferline#buffers'
\   },
\   'component_type': {
\     'buffers': 'tabsel'
\   },
\   'colorscheme': 'base16_<%= $THEME | sed "s/-/_/g" %>'
\ }

let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#min_buffer_count = 2

"
" Keybindings
"

" SnipRun
nmap <silent> <Leader>s  <Plug>SnipRun
vmap <silent> <Leader>s  <Plug>SnipRun
nmap <silent> <Leader>sc <Plug>SnipReset

" Tagbar
nmap <silent> <Leader>o :Tagbar<CR>

" Nerdtree
nmap <silent> <Leader>n :NERDTreeToggle<CR>

" Test driven development
" TODO: map <Leader>t to either TestNearest or TestFile
" Also configure the strategy
noremap <Leader>tn <cmd>TestNearest<CR>
noremap <Leader>tf <cmd>TestFile<CR>
noremap <Leader>ts <cmd>TestSuite<CR>

<% if $NVIM_LUA; then -%>
"
" Telescope
"
noremap <C-f> <cmd>Telescope find_files<CR>
noremap <Leader>f <cmd>Telescope find_files<CR>
noremap <Leader>e <cmd>Telescope file_browser<CR>

noremap <Leader>b <cmd>Telescope buffers<CR>
noremap <Leader>bb <cmd>Telescope buffers<CR>
" noremap <Leader>b <cmd>:lua telescope_buffer_hints<CR> " TODO

noremap <Leader>g <cmd>Telescope live_grep<CR>
noremap <Leader>q <cmd>Telescope quickfix<CR>

noremap <Leader>gs <cmd>Telescope git_status<CR>
noremap <leader>gb <cmd>Telescope git_branch<CR>

inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm(lexima#expand('<LT>CR>', 'i'))
" inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

let g:dashboard_default_executive = 'telescope'

"
" Harpoon
"
noremap <leader>a <cmd>lua require("harpoon.mark").add_file()<cr>
noremap <c-e>     <cmd>lua require("harpoon.ui").toggle_quick_menu()<cr>

noremap <leader>ba <cmd>lua require("harpoon.ui").nav_file(1)<cr>
noremap <leader>bs <cmd>lua require("harpoon.ui").nav_file(2)<cr>
noremap <leader>bd <cmd>lua require("harpoon.ui").nav_file(3)<cr>
noremap <leader>bf <cmd>lua require("harpoon.ui").nav_file(4)<cr>

noremap <leader>td <cmd>lua require("harpoon.term").gotoTerminal(1)<cr>
noremap <leader>tf <cmd>lua require("harpoon.term").gotoTerminal(2)<cr>
noremap <leader>trd <cmd>lua require("harpoon.term").sendCommand(1, 1)<cr>
noremap <leader>trf <cmd>lua require("harpoon.term").sendCommand(1, 2)<cr>

" LSP Settings and keybinds
lua << EOS
local nvim_lsp = require 'lspconfig'
local telescope = require 'telescope'

require'sniprun'.setup({
  display = {
    "Terminal"
  }
})

require'gitsigns'.setup {}
-- require'trouble'.setup {}

vim.o.completeopt = "menuone,noselect"
require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  resolve_timeout = 800;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = true;

  source = {
    path = true;
    buffer = true;
    spell = true;
    calc = true;
    nvim_lsp = true;
    nvim_lua = true;
  };
};

telescope.setup{
  -- TODO: This isn't quite right, I should impliment the theme myself
  defaults = require("telescope.themes").get_ivy {
    file_sorter = require'telescope.sorters'.get_fzy_sorter,
    generic_sorter = require'telescope.sorters'.get_generic_fzy_sorter,
    mappings = {
      i = {
        ["<c-g>"] = require("telescope").extensions.hop.hop,
        ["<c-f>"] = require("telescope").extensions.hop.hop,
        ["<c-s>"] = require("telescope").extensions.hop.hop_toggle_selection,
      },
      n = {
        ["g"] = require("telescope").extensions.hop.hop,
        ["f"] = require("telescope").extensions.hop.hop,
        ["s"] = require("telescope").extensions.hop.hop_toggle_selection,
      },
    },
  },
  pickers = {
    buffers = {
      theme = "ivy",
      sort_lastused = true,
      -- initial_mode = "normal",
      on_complete = { function()
        vim.cmd "stopinsert"
        -- require'telescope'.extensions.hop._hop(picker.results_bufnr, {callback = actions.edit})
      end },
      mappings = {
        i = {
          ["<c-x>"] = "delete_buffer",
        },
        n = {
          ["x"] = "delete_buffer",
          ["f"] = require("telescope").extensions.hop.hop,
        },
      },
    },
  },
  extensions = {
    hop = {},
  }
}

telescope.load_extension('hop')

-- telescope.load_extention('fzy_native')

require'nvim-treesitter.configs'.setup {
  -- TODO: It may be more efficient to only install language packages for
  -- languages I work with
  ensure_installed = "maintained",
  ignore_install = {},
  highlight = {
    enable = true
  },
  incremental_selection = {
    enable = true
  },
  indent = {
    enable = true
  },
}

local on_attach = function(client, buffer)
  -- require'lsp_signature'.on_attach()
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  -- buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- TODO: replace with gbrlsnchs/telescope-lsp-handlers.nvim
  buf_set_keymap('n', 'gd',         '<Cmd>Telescope lsp_definitions<CR>', opts)
  buf_set_keymap('n', 'gi',         '<cmd>Telescope lsp_implementations<CR>', opts)
  buf_set_keymap('n', '<leader>ca', '<cmd>Telescope lsp_code_actions<CR>', opts)
  buf_set_keymap('n', '<leader>cr', '<cmd>Telescope lsp_range_code_actions<CR>', opts)
  buf_set_keymap('n', 'gr',         '<cmd>Telescope lsp_references<CR>', opts)
  buf_set_keymap('n', 'gD',         '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'K',          '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', '<C-k>',      '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<leader>D',  '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<leader>e',  '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d',         '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d',         '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<leader>q',  '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<leader>cf',  '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<leader>r',  '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
end

local servers = { "clangd", "rust_analyzer" }
-- TODO: This causes an error when going into insert mode "Not allowed here"
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { on_attach = on_attach }
end
EOS
<% else -%>
" Deoplete
" autocmd BufEnter * call deoplete#enable()
let g:deoplete#enable_at_startup = 1
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-r>=deoplete#manual_complete()<CR>'
inoremap <expr> <C-p> pumvisible() ? '<C-n>' : '<C-r>=deoplete#manual_complete()<CR>'

" FZF
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
noremap <C-f> :Files<CR>
noremap <Leader>f :Files<CR>
noremap <Leader>b :Buffers<CR>

nmap <silent> <Leader>o :Tagbar<CR>
nmap <silent> <Leader>n :NERDTreeToggle<CR>

" Fly Grep
let g:FlyGrep_input_delay = 40
nmap <Leader>g :FlyGrep<CR>

" neovim-languageclient
let g:LanguageClient_serverCommands = {
  \ 'c': ['clangd'],
  \ 'cpp': ['clangd'],
  \ 'json': ['json-languageserver', '--stdio'],
  \ 'python': ['pyls'],
  \ 'rust': ['rust-analyzer'],
  \ }


" LanguageClient Key Bindings
function SetupLSP()
  set omnifunc=LanguageClient#omniComplete
  set completefunc=LanguageClient#complete

  nmap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nmap <silent> gt :call LanguageClient#textDocument_typeDefinition()<CR>
  nmap <silent> gr :call LanguageClient#textDocument_references()<CR>

  " nmap <Leader>o :call LanguageClient_textDocument_documentSymbol()<CR>

  nmap <Leader>r :call LanguageClient#textDocument_rename()<CR>
  nmap <Leader>= :call LanguageClient#textDocument_formatting()<CR>
  vmap <Leader>= :call LanguageClient#textDocument_rangeFormatting()<CR>
  nmap <Leader>a :call LanguageClient_textDocument_codeAction()<CR>
endfunction()

augroup LSP
  au!
  autocmd FileType c,cpp,json,python,rust call SetupLSP()
augroup end
<% fi -%>

" vim: syntax=vim
" vim: ft=vim
